package com.hisun.DD;

import com.hisun.SC.*;

import java.lang.reflect.Method;

import java.io.IOException;
import java.sql.SQLException;

public class DDZUPARM {
	public brParm DDTPRDD_BR = new brParm();
	public DBParm DDTPRDD_RD;
    String JIBS_tmp_str[] = new String[10];
    boolean pgmRtn = false;
    String K_OUTPUT_FMT = "DD999";
    int WS_OUT_CNT = 0;
    String WS_MSGID = " ";
    short WS_FLD_NO = 0;
    int WS_EFF_DATE = 0;
    int WS_EXP_DATE = 0;
    char WS_PRDD_FLG = ' ';
    DDCMSG_ERROR_MSG DDCMSG_ERROR_MSG = new DDCMSG_ERROR_MSG();
    SCCEXCP SCCEXCP = new SCCEXCP();
    SCCCALL SCCCALL = new SCCCALL();
    SCCMSG SCCMSG = new SCCMSG();
    SCCFMT SCCFMT = new SCCFMT();
    SCCMPAG SCCMPAG = new SCCMPAG();
    DDRPRDD DDRPRDD = new DDRPRDD();
    SCCGWA SCCGWA;
    DDCUPARM DDCUPARM;
    public void MP(SCCGWA SCCGWA, DDCUPARM DDCUPARM) throws IOException,SQLException,Exception {
        this.SCCGWA = SCCGWA;
        this.DDCUPARM = DDCUPARM;
        CEP.TRC(SCCGWA);
        A000_INIT_PROC();
        if (pgmRtn) return;
        B000_MAIN_PROC();
        if (pgmRtn) return;
        CEP.TRC(SCCGWA, "DDZUPARM return!");
        Z_RET();
        if (pgmRtn) return;
    }
    public void A000_INIT_PROC() throws IOException,SQLException,Exception {
    }
    public void B000_MAIN_PROC() throws IOException,SQLException,Exception {
        B100_CHECK_INPUT_DATA();
        if (pgmRtn) return;
        if (DDCUPARM.TX_TYPE == 'I') {
            B200_INQ_PARM_CD_PROC();
            if (pgmRtn) return;
        } else if (DDCUPARM.TX_TYPE == 'A') {
            B300_ADD_PARM_CD_PROC();
            if (pgmRtn) return;
        } else if (DDCUPARM.TX_TYPE == 'M') {
            B400_MOD_PARM_CD_PROC();
            if (pgmRtn) return;
        } else if (DDCUPARM.TX_TYPE == 'D') {
            B500_DEL_PARM_CD_PROC();
            if (pgmRtn) return;
        } else {
            IBS.init(SCCGWA, SCCEXCP);
            SCCEXCP.MSG_TEXT.KEY_OR_OTHER = "INVALID TX TYPE(" + DDCUPARM.TX_TYPE + ")";
            CEP.EXCP(SCCGWA, SCCEXCP.MSG_TEXT.KEY_OR_OTHER);
        }
    }
    public void B100_CHECK_INPUT_DATA() throws IOException,SQLException,Exception {
        CEP.TRC(SCCGWA, DDCUPARM.TX_TYPE);
        CEP.TRC(SCCGWA, DDCUPARM.IBS_AC_BK);
        CEP.TRC(SCCGWA, DDCUPARM.DATA.KEY.PRDMO_CD);
        CEP.TRC(SCCGWA, DDCUPARM.DATA.KEY.PARM_CODE);
        CEP.TRC(SCCGWA, DDCUPARM.DATE.EFF_DATE);
        if (DDCUPARM.TX_TYPE == ' ') {
            IBS.CPY2CLS(SCCGWA, DDCMSG_ERROR_MSG.DD_FUNC_M_INPUT, DDCUPARM.RC);
            Z_RET();
            if (pgmRtn) return;
        }
        if (DDCUPARM.TX_TYPE != 'A' 
            && DDCUPARM.TX_TYPE != 'D' 
            && DDCUPARM.TX_TYPE != 'M' 
            && DDCUPARM.TX_TYPE != 'I') {
            IBS.CPY2CLS(SCCGWA, DDCMSG_ERROR_MSG.DD_FUNC_INVALID, DDCUPARM.RC);
            Z_RET();
            if (pgmRtn) return;
        }
        if (DDCUPARM.IBS_AC_BK.trim().length() == 0) {
            DDCUPARM.IBS_AC_BK = SCCGWA.COMM_AREA.TR_BANK;
        }
        if (DDCUPARM.DATA.KEY.PRDMO_CD.trim().length() == 0) {
            DDCUPARM.DATA.KEY.PRDMO_CD = "CAAC";
        }
        if (DDCUPARM.DATA.KEY.PARM_CODE.trim().length() == 0) {
            IBS.CPY2CLS(SCCGWA, DDCMSG_ERROR_MSG.DD_PARM_CODE_M_INPUT, DDCUPARM.RC);
            Z_RET();
            if (pgmRtn) return;
        }
        if (DDCUPARM.DATE.EFF_DATE == 0) {
            DDCUPARM.DATE.EFF_DATE = SCCGWA.COMM_AREA.AC_DATE;
        }
    }
    public void B200_INQ_PARM_CD_PROC() throws IOException,SQLException,Exception {
        IBS.init(SCCGWA, DDRPRDD);
        DDRPRDD.KEY.IBS_AC_BK = DDCUPARM.IBS_AC_BK;
        DDRPRDD.KEY.PRDMO_CD = DDCUPARM.DATA.KEY.PRDMO_CD;
        DDRPRDD.KEY.PARM_CODE = DDCUPARM.DATA.KEY.PARM_CODE;
        WS_EFF_DATE = DDCUPARM.DATE.EFF_DATE;
        R000_STARTBR_FIRST_DDTPRDD();
        if (pgmRtn) return;
        CEP.TRC(SCCGWA, WS_PRDD_FLG);
        if (WS_PRDD_FLG == 'N') {
            CEP.TRC(SCCGWA, "--PARMCODE NOTFND--");
            IBS.CPY2CLS(SCCGWA, DDCMSG_ERROR_MSG.DD_DDTPRDD_REC_NOTFND, DDCUPARM.RC);
            Z_RET();
            if (pgmRtn) return;
        } else {
            CEP.TRC(SCCGWA, "--PARMCODE FOUND--");
            DDCUPARM.IBS_AC_BK = DDRPRDD.KEY.IBS_AC_BK;
            DDCUPARM.DATA.KEY.PRDMO_CD = DDRPRDD.KEY.PRDMO_CD;
            DDCUPARM.DATA.KEY.PARM_CODE = DDRPRDD.KEY.PARM_CODE;
            DDCUPARM.DATE.EFF_DATE = DDRPRDD.KEY.EFF_DATE;
            DDCUPARM.DATE.EXP_DATE = DDRPRDD.EXP_DATE;
            DDCUPARM.DATA.VAL.CHN_NAME = DDRPRDD.CHN_NAME;
            DDCUPARM.DATA.VAL.CUST_TYPE = DDRPRDD.CUST_TYPE;
            DDCUPARM.DATA.VAL.CUR_TYPE = DDRPRDD.CUR_TYPE;
            DDCUPARM.DATA.VAL.CCY1 = DDRPRDD.CCY1;
            DDCUPARM.DATA.VAL.CCY2 = DDRPRDD.CCY2;
            DDCUPARM.DATA.VAL.CCY3 = DDRPRDD.CCY3;
            DDCUPARM.DATA.VAL.CCY4 = DDRPRDD.CCY4;
            DDCUPARM.DATA.VAL.CCY5 = DDRPRDD.CCY5;
            DDCUPARM.DATA.VAL.CCY6 = DDRPRDD.CCY6;
            DDCUPARM.DATA.VAL.CCY7 = DDRPRDD.CCY7;
            DDCUPARM.DATA.VAL.CCY8 = DDRPRDD.CCY8;
            DDCUPARM.DATA.VAL.CCY9 = DDRPRDD.CCY9;
            DDCUPARM.DATA.VAL.CCY10 = DDRPRDD.CCY10;
            DDCUPARM.DATA.VAL.CCY11 = DDRPRDD.CCY11;
            DDCUPARM.DATA.VAL.CCY12 = DDRPRDD.CCY12;
            DDCUPARM.DATA.VAL.CCY13 = DDRPRDD.CCY13;
            DDCUPARM.DATA.VAL.CCY14 = DDRPRDD.CCY14;
            DDCUPARM.DATA.VAL.CCY15 = DDRPRDD.CCY15;
            DDCUPARM.DATA.VAL.CCY16 = DDRPRDD.CCY16;
            DDCUPARM.DATA.VAL.CCY17 = DDRPRDD.CCY17;
            DDCUPARM.DATA.VAL.CCY18 = DDRPRDD.CCY18;
            DDCUPARM.DATA.VAL.CCY19 = DDRPRDD.CCY19;
            DDCUPARM.DATA.VAL.CCY20 = DDRPRDD.CCY20;
            DDCUPARM.DATA.VAL.PRD_TOOL_PSB = DDRPRDD.PRD_TOOL_PSB;
            DDCUPARM.DATA.VAL.PRD_TOOL_CARD = DDRPRDD.PRD_TOOL_CARD;
            DDCUPARM.DATA.VAL.PRD_TOOL_CHQ = DDRPRDD.PRD_TOOL_CHQ;
            DDCUPARM.DATA.VAL.OVERDRAFT_FAC = DDRPRDD.OVERDRAFT_FAC;
            DDCUPARM.DATA.VAL.CAL_DINT_METH = DDRPRDD.CAL_DINT_METH;
            DDCUPARM.DATA.VAL.TAX_RATE_BASE = DDRPRDD.TAX_RATE_BASE;
            DDCUPARM.DATA.VAL.TAX_RATE_TENOR = DDRPRDD.TAX_RATE_TENOR;
            DDCUPARM.DATA.VAL.DEP_POST_PERIOD1 = DDRPRDD.DEP_POST_PERIOD1;
            DDCUPARM.DATA.VAL.DEP_POST_DATE1 = DDRPRDD.DEP_POST_DATE1;
            DDCUPARM.DATA.VAL.OD_POST_PERIOD1 = DDRPRDD.OD_POST_PERIOD1;
            DDCUPARM.DATA.VAL.OD_POST_DATE1 = DDRPRDD.OD_POST_DATE1;
            DDCUPARM.DATA.VAL.DEP_POST_PERIOD2 = DDRPRDD.DEP_POST_PERIOD2;
            DDCUPARM.DATA.VAL.DEP_POST_DATE2 = DDRPRDD.DEP_POST_DATE2;
            DDCUPARM.DATA.VAL.OD_POST_PERIOD2 = DDRPRDD.OD_POST_PERIOD2;
            DDCUPARM.DATA.VAL.OD_POST_DATE2 = DDRPRDD.OD_POST_DATE2;
            DDCUPARM.DATA.VAL.CASH_TXN_TYPE = DDRPRDD.CASH_TXN_TYPE;
            DDCUPARM.DATA.VAL.CASH_MSG_TYPE = DDRPRDD.CASH_MSG_TYPE;
            DDCUPARM.DATA.VAL.CROS_DR_LMT = DDRPRDD.CROS_DR_LMT;
            DDCUPARM.DATA.VAL.CROS_CR_LMT = DDRPRDD.CROS_CR_LMT;
            DDCUPARM.DATA.VAL.REMARK = DDRPRDD.REMARK;
            DDCUPARM.DATA.VAL.CERT_FLG = DDRPRDD.CERT_FLG;
            DDCUPARM.DATA.VAL.AUFR_FLG = DDRPRDD.AUFR_FLG;
            DDCUPARM.DATA.VAL.TD_PROD = DDRPRDD.TD_PROD;
            DDCUPARM.DATA.VAL.TD_FLG = DDRPRDD.TD_FLG;
            DDCUPARM.DATA.VAL.GM_FLG = DDRPRDD.GM_FLG;
            CEP.TRC(SCCGWA, DDCUPARM.DATA);
            CEP.TRC(SCCGWA, DDCUPARM.DATA.VAL.GM_FLG);
        }
    }
    public void B300_ADD_PARM_CD_PROC() throws IOException,SQLException,Exception {
        IBS.init(SCCGWA, DDRPRDD);
        DDRPRDD.KEY.IBS_AC_BK = DDCUPARM.IBS_AC_BK;
        DDRPRDD.KEY.PRDMO_CD = DDCUPARM.DATA.KEY.PRDMO_CD;
        DDRPRDD.KEY.PARM_CODE = DDCUPARM.DATA.KEY.PARM_CODE;
        DDRPRDD.KEY.EFF_DATE = DDCUPARM.DATE.EFF_DATE;
        DDRPRDD.EXP_DATE = DDCUPARM.DATE.EXP_DATE;
        DDRPRDD.CHN_NAME = DDCUPARM.DATA.VAL.CHN_NAME;
        DDRPRDD.CUST_TYPE = DDCUPARM.DATA.VAL.CUST_TYPE;
        DDRPRDD.CUR_TYPE = DDCUPARM.DATA.VAL.CUR_TYPE;
        DDRPRDD.CCY1 = DDCUPARM.DATA.VAL.CCY1;
        DDRPRDD.CCY2 = DDCUPARM.DATA.VAL.CCY2;
        DDRPRDD.CCY3 = DDCUPARM.DATA.VAL.CCY3;
        DDRPRDD.CCY4 = DDCUPARM.DATA.VAL.CCY4;
        DDRPRDD.CCY5 = DDCUPARM.DATA.VAL.CCY5;
        DDRPRDD.CCY6 = DDCUPARM.DATA.VAL.CCY6;
        DDRPRDD.CCY7 = DDCUPARM.DATA.VAL.CCY7;
        DDRPRDD.CCY8 = DDCUPARM.DATA.VAL.CCY8;
        DDRPRDD.CCY9 = DDCUPARM.DATA.VAL.CCY9;
        DDRPRDD.CCY10 = DDCUPARM.DATA.VAL.CCY10;
        DDRPRDD.CCY11 = DDCUPARM.DATA.VAL.CCY11;
        DDRPRDD.CCY12 = DDCUPARM.DATA.VAL.CCY12;
        DDRPRDD.CCY13 = DDCUPARM.DATA.VAL.CCY13;
        DDRPRDD.CCY14 = DDCUPARM.DATA.VAL.CCY14;
        DDRPRDD.CCY15 = DDCUPARM.DATA.VAL.CCY15;
        DDRPRDD.CCY16 = DDCUPARM.DATA.VAL.CCY16;
        DDRPRDD.CCY17 = DDCUPARM.DATA.VAL.CCY17;
        DDRPRDD.CCY18 = DDCUPARM.DATA.VAL.CCY18;
        DDRPRDD.CCY19 = DDCUPARM.DATA.VAL.CCY19;
        DDRPRDD.CCY20 = DDCUPARM.DATA.VAL.CCY20;
        DDRPRDD.PRD_TOOL_PSB = DDCUPARM.DATA.VAL.PRD_TOOL_PSB;
        DDRPRDD.PRD_TOOL_CARD = DDCUPARM.DATA.VAL.PRD_TOOL_CARD;
        DDRPRDD.PRD_TOOL_CHQ = DDCUPARM.DATA.VAL.PRD_TOOL_CHQ;
        DDRPRDD.OVERDRAFT_FAC = DDCUPARM.DATA.VAL.OVERDRAFT_FAC;
        DDRPRDD.CAL_DINT_METH = DDCUPARM.DATA.VAL.CAL_DINT_METH;
        DDRPRDD.TAX_RATE_BASE = DDCUPARM.DATA.VAL.TAX_RATE_BASE;
        DDRPRDD.TAX_RATE_TENOR = DDCUPARM.DATA.VAL.TAX_RATE_TENOR;
        DDRPRDD.DEP_POST_PERIOD1 = DDCUPARM.DATA.VAL.DEP_POST_PERIOD1;
        DDRPRDD.DEP_POST_DATE1 = DDCUPARM.DATA.VAL.DEP_POST_DATE1;
        DDRPRDD.OD_POST_PERIOD1 = DDCUPARM.DATA.VAL.OD_POST_PERIOD1;
        DDRPRDD.OD_POST_DATE1 = DDCUPARM.DATA.VAL.OD_POST_DATE1;
        DDRPRDD.DEP_POST_PERIOD2 = DDCUPARM.DATA.VAL.DEP_POST_PERIOD2;
        DDRPRDD.DEP_POST_DATE2 = DDCUPARM.DATA.VAL.DEP_POST_DATE2;
        DDRPRDD.OD_POST_PERIOD2 = DDCUPARM.DATA.VAL.OD_POST_PERIOD2;
        DDRPRDD.OD_POST_DATE2 = DDCUPARM.DATA.VAL.OD_POST_DATE2;
        DDRPRDD.CASH_TXN_TYPE = DDCUPARM.DATA.VAL.CASH_TXN_TYPE;
        DDRPRDD.CASH_MSG_TYPE = DDCUPARM.DATA.VAL.CASH_MSG_TYPE;
        DDRPRDD.CROS_DR_LMT = DDCUPARM.DATA.VAL.CROS_DR_LMT;
        DDRPRDD.CROS_CR_LMT = DDCUPARM.DATA.VAL.CROS_CR_LMT;
        DDRPRDD.REMARK = DDCUPARM.DATA.VAL.REMARK;
        DDRPRDD.CERT_FLG = DDCUPARM.DATA.VAL.CERT_FLG;
        DDRPRDD.AUFR_FLG = DDCUPARM.DATA.VAL.AUFR_FLG;
        DDRPRDD.TD_PROD = DDCUPARM.DATA.VAL.TD_PROD;
        DDRPRDD.TD_FLG = DDCUPARM.DATA.VAL.TD_FLG;
        DDRPRDD.GM_FLG = DDCUPARM.DATA.VAL.GM_FLG;
        DDRPRDD.CRT_DATE = SCCGWA.COMM_AREA.AC_DATE;
        DDRPRDD.CRT_TLR = SCCGWA.COMM_AREA.TL_ID;
        DDRPRDD.UPDTBL_DATE = SCCGWA.COMM_AREA.AC_DATE;
        DDRPRDD.UPDTBL_TLR = SCCGWA.COMM_AREA.TL_ID;
        R000_WRITE_DDTPRDD();
        if (pgmRtn) return;
        DDCUPARM.IBS_AC_BK = DDRPRDD.KEY.IBS_AC_BK;
        DDCUPARM.DATA.KEY.PRDMO_CD = DDRPRDD.KEY.PRDMO_CD;
        DDCUPARM.DATA.KEY.PARM_CODE = DDRPRDD.KEY.PARM_CODE;
        DDCUPARM.DATE.EFF_DATE = DDRPRDD.KEY.EFF_DATE;
        DDCUPARM.DATE.EXP_DATE = DDRPRDD.EXP_DATE;
        DDCUPARM.DATA.VAL.CHN_NAME = DDRPRDD.CHN_NAME;
        DDCUPARM.DATA.VAL.CUST_TYPE = DDRPRDD.CUST_TYPE;
        DDCUPARM.DATA.VAL.CUR_TYPE = DDRPRDD.CUR_TYPE;
        DDCUPARM.DATA.VAL.CCY1 = DDRPRDD.CCY1;
        DDCUPARM.DATA.VAL.CCY2 = DDRPRDD.CCY2;
        DDCUPARM.DATA.VAL.CCY3 = DDRPRDD.CCY3;
        DDCUPARM.DATA.VAL.CCY4 = DDRPRDD.CCY4;
        DDCUPARM.DATA.VAL.CCY5 = DDRPRDD.CCY5;
        DDCUPARM.DATA.VAL.CCY6 = DDRPRDD.CCY6;
        DDCUPARM.DATA.VAL.CCY7 = DDRPRDD.CCY7;
        DDCUPARM.DATA.VAL.CCY8 = DDRPRDD.CCY8;
        DDCUPARM.DATA.VAL.CCY9 = DDRPRDD.CCY9;
        DDCUPARM.DATA.VAL.CCY10 = DDRPRDD.CCY10;
        DDCUPARM.DATA.VAL.CCY11 = DDRPRDD.CCY11;
        DDCUPARM.DATA.VAL.CCY12 = DDRPRDD.CCY12;
        DDCUPARM.DATA.VAL.CCY13 = DDRPRDD.CCY13;
        DDCUPARM.DATA.VAL.CCY14 = DDRPRDD.CCY14;
        DDCUPARM.DATA.VAL.CCY15 = DDRPRDD.CCY15;
        DDCUPARM.DATA.VAL.CCY16 = DDRPRDD.CCY16;
        DDCUPARM.DATA.VAL.CCY17 = DDRPRDD.CCY17;
        DDCUPARM.DATA.VAL.CCY18 = DDRPRDD.CCY18;
        DDCUPARM.DATA.VAL.CCY19 = DDRPRDD.CCY19;
        DDCUPARM.DATA.VAL.CCY20 = DDRPRDD.CCY20;
        DDCUPARM.DATA.VAL.PRD_TOOL_PSB = DDRPRDD.PRD_TOOL_PSB;
        DDCUPARM.DATA.VAL.PRD_TOOL_CARD = DDRPRDD.PRD_TOOL_CARD;
        DDCUPARM.DATA.VAL.PRD_TOOL_CHQ = DDRPRDD.PRD_TOOL_CHQ;
        DDCUPARM.DATA.VAL.OVERDRAFT_FAC = DDRPRDD.OVERDRAFT_FAC;
        DDCUPARM.DATA.VAL.CAL_DINT_METH = DDRPRDD.CAL_DINT_METH;
        DDCUPARM.DATA.VAL.TAX_RATE_BASE = DDRPRDD.TAX_RATE_BASE;
        DDCUPARM.DATA.VAL.TAX_RATE_TENOR = DDRPRDD.TAX_RATE_TENOR;
        DDCUPARM.DATA.VAL.DEP_POST_PERIOD1 = DDRPRDD.DEP_POST_PERIOD1;
        DDCUPARM.DATA.VAL.DEP_POST_DATE1 = DDRPRDD.DEP_POST_DATE1;
        DDCUPARM.DATA.VAL.OD_POST_PERIOD1 = DDRPRDD.OD_POST_PERIOD1;
        DDCUPARM.DATA.VAL.OD_POST_DATE1 = DDRPRDD.OD_POST_DATE1;
        DDCUPARM.DATA.VAL.DEP_POST_PERIOD2 = DDRPRDD.DEP_POST_PERIOD2;
        DDCUPARM.DATA.VAL.DEP_POST_DATE2 = DDRPRDD.DEP_POST_DATE2;
        DDCUPARM.DATA.VAL.OD_POST_PERIOD2 = DDRPRDD.OD_POST_PERIOD2;
        DDCUPARM.DATA.VAL.OD_POST_DATE2 = DDRPRDD.OD_POST_DATE2;
        DDCUPARM.DATA.VAL.CASH_TXN_TYPE = DDRPRDD.CASH_TXN_TYPE;
        DDCUPARM.DATA.VAL.CASH_MSG_TYPE = DDRPRDD.CASH_MSG_TYPE;
        DDCUPARM.DATA.VAL.CROS_DR_LMT = DDRPRDD.CROS_DR_LMT;
        DDCUPARM.DATA.VAL.CROS_CR_LMT = DDRPRDD.CROS_CR_LMT;
        DDCUPARM.DATA.VAL.REMARK = DDRPRDD.REMARK;
        DDCUPARM.DATA.VAL.CERT_FLG = DDRPRDD.CERT_FLG;
        DDCUPARM.DATA.VAL.AUFR_FLG = DDRPRDD.AUFR_FLG;
        DDCUPARM.DATA.VAL.TD_PROD = DDRPRDD.TD_PROD;
        DDCUPARM.DATA.VAL.TD_FLG = DDRPRDD.TD_FLG;
        DDCUPARM.DATA.VAL.GM_FLG = DDRPRDD.GM_FLG;
        CEP.TRC(SCCGWA, DDCUPARM.DATA);
        CEP.TRC(SCCGWA, DDCUPARM.DATA.VAL.GM_FLG);
    }
    public void B400_MOD_PARM_CD_PROC() throws IOException,SQLException,Exception {
        IBS.init(SCCGWA, DDRPRDD);
        DDRPRDD.KEY.IBS_AC_BK = DDCUPARM.IBS_AC_BK;
        DDRPRDD.KEY.PRDMO_CD = DDCUPARM.DATA.KEY.PRDMO_CD;
        DDRPRDD.KEY.PARM_CODE = DDCUPARM.DATA.KEY.PARM_CODE;
        WS_EFF_DATE = DDCUPARM.DATE.EFF_DATE;
        R000_STARTBR_FIRST_DDTPRDD();
        if (pgmRtn) return;
        CEP.TRC(SCCGWA, WS_PRDD_FLG);
        if (WS_PRDD_FLG == 'N') {
            CEP.TRC(SCCGWA, "--PARMCODE NOTFND--");
            IBS.CPY2CLS(SCCGWA, DDCMSG_ERROR_MSG.DD_DDTPRDD_REC_NOTFND, DDCUPARM.RC);
            Z_RET();
            if (pgmRtn) return;
        } else {
            CEP.TRC(SCCGWA, DDCUPARM.DATE.EFF_DATE);
            CEP.TRC(SCCGWA, DDRPRDD.KEY.EFF_DATE);
            if (DDCUPARM.DATE.EFF_DATE == DDRPRDD.KEY.EFF_DATE) {
                CEP.TRC(SCCGWA, "--MODIFY PROC--");
                IBS.init(SCCGWA, DDRPRDD);
                DDRPRDD.KEY.IBS_AC_BK = DDCUPARM.IBS_AC_BK;
                DDRPRDD.KEY.PRDMO_CD = DDCUPARM.DATA.KEY.PRDMO_CD;
                DDRPRDD.KEY.PARM_CODE = DDCUPARM.DATA.KEY.PARM_CODE;
                DDRPRDD.KEY.EFF_DATE = DDCUPARM.DATE.EFF_DATE;
                R000_READUPDATE_DDTPRDD();
                if (pgmRtn) return;
                DDRPRDD.EXP_DATE = DDCUPARM.DATE.EXP_DATE;
                DDRPRDD.CHN_NAME = DDCUPARM.DATA.VAL.CHN_NAME;
                DDRPRDD.CUST_TYPE = DDCUPARM.DATA.VAL.CUST_TYPE;
                DDRPRDD.CUR_TYPE = DDCUPARM.DATA.VAL.CUR_TYPE;
                DDRPRDD.CCY1 = DDCUPARM.DATA.VAL.CCY1;
                DDRPRDD.CCY2 = DDCUPARM.DATA.VAL.CCY2;
                DDRPRDD.CCY3 = DDCUPARM.DATA.VAL.CCY3;
                DDRPRDD.CCY4 = DDCUPARM.DATA.VAL.CCY4;
                DDRPRDD.CCY5 = DDCUPARM.DATA.VAL.CCY5;
                DDRPRDD.CCY6 = DDCUPARM.DATA.VAL.CCY6;
                DDRPRDD.CCY7 = DDCUPARM.DATA.VAL.CCY7;
                DDRPRDD.CCY8 = DDCUPARM.DATA.VAL.CCY8;
                DDRPRDD.CCY9 = DDCUPARM.DATA.VAL.CCY9;
                DDRPRDD.CCY10 = DDCUPARM.DATA.VAL.CCY10;
                DDRPRDD.CCY11 = DDCUPARM.DATA.VAL.CCY11;
                DDRPRDD.CCY12 = DDCUPARM.DATA.VAL.CCY12;
                DDRPRDD.CCY13 = DDCUPARM.DATA.VAL.CCY13;
                DDRPRDD.CCY14 = DDCUPARM.DATA.VAL.CCY14;
                DDRPRDD.CCY15 = DDCUPARM.DATA.VAL.CCY15;
                DDRPRDD.CCY16 = DDCUPARM.DATA.VAL.CCY16;
                DDRPRDD.CCY17 = DDCUPARM.DATA.VAL.CCY17;
                DDRPRDD.CCY18 = DDCUPARM.DATA.VAL.CCY18;
                DDRPRDD.CCY19 = DDCUPARM.DATA.VAL.CCY19;
                DDRPRDD.CCY20 = DDCUPARM.DATA.VAL.CCY20;
                DDRPRDD.PRD_TOOL_PSB = DDCUPARM.DATA.VAL.PRD_TOOL_PSB;
                DDRPRDD.PRD_TOOL_CARD = DDCUPARM.DATA.VAL.PRD_TOOL_CARD;
                DDRPRDD.PRD_TOOL_CHQ = DDCUPARM.DATA.VAL.PRD_TOOL_CHQ;
                DDRPRDD.OVERDRAFT_FAC = DDCUPARM.DATA.VAL.OVERDRAFT_FAC;
                DDRPRDD.CAL_DINT_METH = DDCUPARM.DATA.VAL.CAL_DINT_METH;
                DDRPRDD.TAX_RATE_BASE = DDCUPARM.DATA.VAL.TAX_RATE_BASE;
                DDRPRDD.TAX_RATE_TENOR = DDCUPARM.DATA.VAL.TAX_RATE_TENOR;
                DDRPRDD.DEP_POST_PERIOD1 = DDCUPARM.DATA.VAL.DEP_POST_PERIOD1;
                DDRPRDD.DEP_POST_DATE1 = DDCUPARM.DATA.VAL.DEP_POST_DATE1;
                DDRPRDD.OD_POST_PERIOD1 = DDCUPARM.DATA.VAL.OD_POST_PERIOD1;
                DDRPRDD.OD_POST_DATE1 = DDCUPARM.DATA.VAL.OD_POST_DATE1;
                DDRPRDD.DEP_POST_PERIOD2 = DDCUPARM.DATA.VAL.DEP_POST_PERIOD2;
                DDRPRDD.DEP_POST_DATE2 = DDCUPARM.DATA.VAL.DEP_POST_DATE2;
                DDRPRDD.OD_POST_PERIOD2 = DDCUPARM.DATA.VAL.OD_POST_PERIOD2;
                DDRPRDD.OD_POST_DATE2 = DDCUPARM.DATA.VAL.OD_POST_DATE2;
                DDRPRDD.CASH_TXN_TYPE = DDCUPARM.DATA.VAL.CASH_TXN_TYPE;
                DDRPRDD.CASH_MSG_TYPE = DDCUPARM.DATA.VAL.CASH_MSG_TYPE;
                DDRPRDD.CROS_DR_LMT = DDCUPARM.DATA.VAL.CROS_DR_LMT;
                DDRPRDD.CROS_CR_LMT = DDCUPARM.DATA.VAL.CROS_CR_LMT;
                DDRPRDD.REMARK = DDCUPARM.DATA.VAL.REMARK;
                DDRPRDD.CERT_FLG = DDCUPARM.DATA.VAL.CERT_FLG;
                DDRPRDD.AUFR_FLG = DDCUPARM.DATA.VAL.AUFR_FLG;
                DDRPRDD.TD_PROD = DDCUPARM.DATA.VAL.TD_PROD;
                DDRPRDD.TD_FLG = DDCUPARM.DATA.VAL.TD_FLG;
                DDRPRDD.GM_FLG = DDCUPARM.DATA.VAL.GM_FLG;
                DDRPRDD.UPDTBL_DATE = SCCGWA.COMM_AREA.AC_DATE;
                DDRPRDD.UPDTBL_TLR = SCCGWA.COMM_AREA.TL_ID;
                R000_REWRITE_DDTPRDD();
                if (pgmRtn) return;
                DDCUPARM.IBS_AC_BK = DDRPRDD.KEY.IBS_AC_BK;
                DDCUPARM.DATA.KEY.PRDMO_CD = DDRPRDD.KEY.PRDMO_CD;
                DDCUPARM.DATA.KEY.PARM_CODE = DDRPRDD.KEY.PARM_CODE;
                DDCUPARM.DATE.EFF_DATE = DDRPRDD.KEY.EFF_DATE;
                DDCUPARM.DATE.EXP_DATE = DDRPRDD.EXP_DATE;
                DDCUPARM.DATA.VAL.CHN_NAME = DDRPRDD.CHN_NAME;
                DDCUPARM.DATA.VAL.CUST_TYPE = DDRPRDD.CUST_TYPE;
                DDCUPARM.DATA.VAL.CUR_TYPE = DDRPRDD.CUR_TYPE;
                DDCUPARM.DATA.VAL.CCY1 = DDRPRDD.CCY1;
                DDCUPARM.DATA.VAL.CCY2 = DDRPRDD.CCY2;
                DDCUPARM.DATA.VAL.CCY3 = DDRPRDD.CCY3;
                DDCUPARM.DATA.VAL.CCY4 = DDRPRDD.CCY4;
                DDCUPARM.DATA.VAL.CCY5 = DDRPRDD.CCY5;
                DDCUPARM.DATA.VAL.CCY6 = DDRPRDD.CCY6;
                DDCUPARM.DATA.VAL.CCY7 = DDRPRDD.CCY7;
                DDCUPARM.DATA.VAL.CCY8 = DDRPRDD.CCY8;
                DDCUPARM.DATA.VAL.CCY9 = DDRPRDD.CCY9;
                DDCUPARM.DATA.VAL.CCY10 = DDRPRDD.CCY10;
                DDCUPARM.DATA.VAL.CCY11 = DDRPRDD.CCY11;
                DDCUPARM.DATA.VAL.CCY12 = DDRPRDD.CCY12;
                DDCUPARM.DATA.VAL.CCY13 = DDRPRDD.CCY13;
                DDCUPARM.DATA.VAL.CCY14 = DDRPRDD.CCY14;
                DDCUPARM.DATA.VAL.CCY15 = DDRPRDD.CCY15;
                DDCUPARM.DATA.VAL.CCY16 = DDRPRDD.CCY16;
                DDCUPARM.DATA.VAL.CCY17 = DDRPRDD.CCY17;
                DDCUPARM.DATA.VAL.CCY18 = DDRPRDD.CCY18;
                DDCUPARM.DATA.VAL.CCY19 = DDRPRDD.CCY19;
                DDCUPARM.DATA.VAL.CCY20 = DDRPRDD.CCY20;
                DDCUPARM.DATA.VAL.PRD_TOOL_PSB = DDRPRDD.PRD_TOOL_PSB;
                DDCUPARM.DATA.VAL.PRD_TOOL_CARD = DDRPRDD.PRD_TOOL_CARD;
                DDCUPARM.DATA.VAL.PRD_TOOL_CHQ = DDRPRDD.PRD_TOOL_CHQ;
                DDCUPARM.DATA.VAL.OVERDRAFT_FAC = DDRPRDD.OVERDRAFT_FAC;
                DDCUPARM.DATA.VAL.CAL_DINT_METH = DDRPRDD.CAL_DINT_METH;
                DDCUPARM.DATA.VAL.TAX_RATE_BASE = DDRPRDD.TAX_RATE_BASE;
                DDCUPARM.DATA.VAL.TAX_RATE_TENOR = DDRPRDD.TAX_RATE_TENOR;
                DDCUPARM.DATA.VAL.DEP_POST_PERIOD1 = DDRPRDD.DEP_POST_PERIOD1;
                DDCUPARM.DATA.VAL.DEP_POST_DATE1 = DDRPRDD.DEP_POST_DATE1;
                DDCUPARM.DATA.VAL.OD_POST_PERIOD1 = DDRPRDD.OD_POST_PERIOD1;
                DDCUPARM.DATA.VAL.OD_POST_DATE1 = DDRPRDD.OD_POST_DATE1;
                DDCUPARM.DATA.VAL.DEP_POST_PERIOD2 = DDRPRDD.DEP_POST_PERIOD2;
                DDCUPARM.DATA.VAL.DEP_POST_DATE2 = DDRPRDD.DEP_POST_DATE2;
                DDCUPARM.DATA.VAL.OD_POST_PERIOD2 = DDRPRDD.OD_POST_PERIOD2;
                DDCUPARM.DATA.VAL.OD_POST_DATE2 = DDRPRDD.OD_POST_DATE2;
                DDCUPARM.DATA.VAL.CASH_TXN_TYPE = DDRPRDD.CASH_TXN_TYPE;
                DDCUPARM.DATA.VAL.CASH_MSG_TYPE = DDRPRDD.CASH_MSG_TYPE;
                DDCUPARM.DATA.VAL.CROS_DR_LMT = DDRPRDD.CROS_DR_LMT;
                DDCUPARM.DATA.VAL.CROS_CR_LMT = DDRPRDD.CROS_CR_LMT;
                DDCUPARM.DATA.VAL.REMARK = DDRPRDD.REMARK;
                DDCUPARM.DATA.VAL.CERT_FLG = DDRPRDD.CERT_FLG;
                DDCUPARM.DATA.VAL.AUFR_FLG = DDRPRDD.AUFR_FLG;
                DDCUPARM.DATA.VAL.TD_PROD = DDRPRDD.TD_PROD;
                DDCUPARM.DATA.VAL.TD_FLG = DDRPRDD.TD_FLG;
                DDCUPARM.DATA.VAL.GM_FLG = DDRPRDD.GM_FLG;
                CEP.TRC(SCCGWA, DDCUPARM.DATA);
                CEP.TRC(SCCGWA, DDCUPARM.DATA.VAL.GM_FLG);
            } else {
                CEP.TRC(SCCGWA, "--ADD A NEW RECORD--");
                B300_ADD_PARM_CD_PROC();
                if (pgmRtn) return;
            }
        }
    }
    public void B500_DEL_PARM_CD_PROC() throws IOException,SQLException,Exception {
        IBS.init(SCCGWA, DDRPRDD);
        DDRPRDD.KEY.IBS_AC_BK = DDCUPARM.IBS_AC_BK;
        DDRPRDD.KEY.PRDMO_CD = DDCUPARM.DATA.KEY.PRDMO_CD;
        DDRPRDD.KEY.PARM_CODE = DDCUPARM.DATA.KEY.PARM_CODE;
        DDRPRDD.KEY.EFF_DATE = DDCUPARM.DATE.EFF_DATE;
        R000_READUPDATE_DDTPRDD();
        if (pgmRtn) return;
        CEP.TRC(SCCGWA, WS_PRDD_FLG);
        if (WS_PRDD_FLG == 'N') {
            IBS.CPY2CLS(SCCGWA, DDCMSG_ERROR_MSG.DD_DDTPRDD_REC_NOTFND, DDCUPARM.RC);
            Z_RET();
            if (pgmRtn) return;
        } else {
            CEP.TRC(SCCGWA, DDRPRDD.EXP_DATE);
            if (DDRPRDD.EXP_DATE < SCCGWA.COMM_AREA.AC_DATE) {
                IBS.CPY2CLS(SCCGWA, DDCMSG_ERROR_MSG.DD_PRDREC_ALR_EXP, DDCUPARM.RC);
                Z_RET();
                if (pgmRtn) return;
            } else {
                DDRPRDD.EXP_DATE = SCCGWA.COMM_AREA.AC_DATE;
                DDRPRDD.UPDTBL_DATE = SCCGWA.COMM_AREA.AC_DATE;
                DDRPRDD.UPDTBL_TLR = SCCGWA.COMM_AREA.TL_ID;
                R000_REWRITE_DDTPRDD();
                if (pgmRtn) return;
            }
            DDCUPARM.IBS_AC_BK = DDRPRDD.KEY.IBS_AC_BK;
            DDCUPARM.DATA.KEY.PRDMO_CD = DDRPRDD.KEY.PRDMO_CD;
            DDCUPARM.DATA.KEY.PARM_CODE = DDRPRDD.KEY.PARM_CODE;
            DDCUPARM.DATE.EFF_DATE = DDRPRDD.KEY.EFF_DATE;
            DDCUPARM.DATE.EXP_DATE = DDRPRDD.EXP_DATE;
            DDCUPARM.DATA.VAL.CHN_NAME = DDRPRDD.CHN_NAME;
            DDCUPARM.DATA.VAL.CUST_TYPE = DDRPRDD.CUST_TYPE;
            DDCUPARM.DATA.VAL.CUR_TYPE = DDRPRDD.CUR_TYPE;
            DDCUPARM.DATA.VAL.CCY1 = DDRPRDD.CCY1;
            DDCUPARM.DATA.VAL.CCY2 = DDRPRDD.CCY2;
            DDCUPARM.DATA.VAL.CCY3 = DDRPRDD.CCY3;
            DDCUPARM.DATA.VAL.CCY4 = DDRPRDD.CCY4;
            DDCUPARM.DATA.VAL.CCY5 = DDRPRDD.CCY5;
            DDCUPARM.DATA.VAL.CCY6 = DDRPRDD.CCY6;
            DDCUPARM.DATA.VAL.CCY7 = DDRPRDD.CCY7;
            DDCUPARM.DATA.VAL.CCY8 = DDRPRDD.CCY8;
            DDCUPARM.DATA.VAL.CCY9 = DDRPRDD.CCY9;
            DDCUPARM.DATA.VAL.CCY10 = DDRPRDD.CCY10;
            DDCUPARM.DATA.VAL.CCY11 = DDRPRDD.CCY11;
            DDCUPARM.DATA.VAL.CCY12 = DDRPRDD.CCY12;
            DDCUPARM.DATA.VAL.CCY13 = DDRPRDD.CCY13;
            DDCUPARM.DATA.VAL.CCY14 = DDRPRDD.CCY14;
            DDCUPARM.DATA.VAL.CCY15 = DDRPRDD.CCY15;
            DDCUPARM.DATA.VAL.CCY16 = DDRPRDD.CCY16;
            DDCUPARM.DATA.VAL.CCY17 = DDRPRDD.CCY17;
            DDCUPARM.DATA.VAL.CCY18 = DDRPRDD.CCY18;
            DDCUPARM.DATA.VAL.CCY19 = DDRPRDD.CCY19;
            DDCUPARM.DATA.VAL.CCY20 = DDRPRDD.CCY20;
            DDCUPARM.DATA.VAL.PRD_TOOL_PSB = DDRPRDD.PRD_TOOL_PSB;
            DDCUPARM.DATA.VAL.PRD_TOOL_CARD = DDRPRDD.PRD_TOOL_CARD;
            DDCUPARM.DATA.VAL.PRD_TOOL_CHQ = DDRPRDD.PRD_TOOL_CHQ;
            DDCUPARM.DATA.VAL.OVERDRAFT_FAC = DDRPRDD.OVERDRAFT_FAC;
            DDCUPARM.DATA.VAL.CAL_DINT_METH = DDRPRDD.CAL_DINT_METH;
            DDCUPARM.DATA.VAL.TAX_RATE_BASE = DDRPRDD.TAX_RATE_BASE;
            DDCUPARM.DATA.VAL.TAX_RATE_TENOR = DDRPRDD.TAX_RATE_TENOR;
            DDCUPARM.DATA.VAL.DEP_POST_PERIOD1 = DDRPRDD.DEP_POST_PERIOD1;
            DDCUPARM.DATA.VAL.DEP_POST_DATE1 = DDRPRDD.DEP_POST_DATE1;
            DDCUPARM.DATA.VAL.OD_POST_PERIOD1 = DDRPRDD.OD_POST_PERIOD1;
            DDCUPARM.DATA.VAL.OD_POST_DATE1 = DDRPRDD.OD_POST_DATE1;
            DDCUPARM.DATA.VAL.DEP_POST_PERIOD2 = DDRPRDD.DEP_POST_PERIOD2;
            DDCUPARM.DATA.VAL.DEP_POST_DATE2 = DDRPRDD.DEP_POST_DATE2;
            DDCUPARM.DATA.VAL.OD_POST_PERIOD2 = DDRPRDD.OD_POST_PERIOD2;
            DDCUPARM.DATA.VAL.OD_POST_DATE2 = DDRPRDD.OD_POST_DATE2;
            DDCUPARM.DATA.VAL.CASH_TXN_TYPE = DDRPRDD.CASH_TXN_TYPE;
            DDCUPARM.DATA.VAL.CASH_MSG_TYPE = DDRPRDD.CASH_MSG_TYPE;
            DDCUPARM.DATA.VAL.CROS_DR_LMT = DDRPRDD.CROS_DR_LMT;
            DDCUPARM.DATA.VAL.CROS_CR_LMT = DDRPRDD.CROS_CR_LMT;
            DDCUPARM.DATA.VAL.REMARK = DDRPRDD.REMARK;
            DDCUPARM.DATA.VAL.CERT_FLG = DDRPRDD.CERT_FLG;
            DDCUPARM.DATA.VAL.AUFR_FLG = DDRPRDD.AUFR_FLG;
            DDCUPARM.DATA.VAL.TD_PROD = DDRPRDD.TD_PROD;
            DDCUPARM.DATA.VAL.TD_FLG = DDRPRDD.TD_FLG;
            DDCUPARM.DATA.VAL.GM_FLG = DDRPRDD.GM_FLG;
            CEP.TRC(SCCGWA, DDCUPARM.DATA);
            CEP.TRC(SCCGWA, DDCUPARM.DATA.VAL.GM_FLG);
        }
    }
    public void R000_STARTBR_FIRST_DDTPRDD() throws IOException,SQLException,Exception {
        CEP.TRC(SCCGWA, DDRPRDD.KEY.IBS_AC_BK);
        CEP.TRC(SCCGWA, DDRPRDD.KEY.PRDMO_CD);
        CEP.TRC(SCCGWA, DDRPRDD.KEY.PARM_CODE);
        CEP.TRC(SCCGWA, WS_EFF_DATE);
        CEP.TRC(SCCGWA, WS_EXP_DATE);
        DDTPRDD_BR.rp = new DBParm();
        DDTPRDD_BR.rp.TableName = "DDTPRDD";
        DDTPRDD_BR.rp.where = "IBS_AC_BK = :DDRPRDD.KEY.IBS_AC_BK "
            + "AND PRDMO_CD = :DDRPRDD.KEY.PRDMO_CD "
            + "AND PARM_CODE = :DDRPRDD.KEY.PARM_CODE "
            + "AND EFF_DATE <= :WS_EFF_DATE "
            + "AND EXP_DATE > :WS_EFF_DATE";
        DDTPRDD_BR.rp.fst = true;
        DDTPRDD_BR.rp.order = "EFF_DATE DESC";
        IBS.STARTBR(SCCGWA, DDRPRDD, this, DDTPRDD_BR);
        if (SCCGWA.COMM_AREA.DBIO_FLG == '0') {
            WS_PRDD_FLG = 'Y';
        } else {
            WS_PRDD_FLG = 'N';
        }
    }
    public void R000_WRITE_DDTPRDD() throws IOException,SQLException,Exception {
        DDTPRDD_RD = new DBParm();
        DDTPRDD_RD.TableName = "DDTPRDD";
        IBS.WRITE(SCCGWA, DDRPRDD, DDTPRDD_RD);
    }
    public void R000_READ_DDTPRDD() throws IOException,SQLException,Exception {
        DDTPRDD_RD = new DBParm();
        DDTPRDD_RD.TableName = "DDTPRDD";
        IBS.READ(SCCGWA, DDRPRDD, DDTPRDD_RD);
        if (SCCGWA.COMM_AREA.DBIO_FLG == '0') {
            WS_PRDD_FLG = 'Y';
        } else {
            WS_PRDD_FLG = 'N';
        }
    }
    public void R000_READUPDATE_DDTPRDD() throws IOException,SQLException,Exception {
        DDTPRDD_RD = new DBParm();
        DDTPRDD_RD.TableName = "DDTPRDD";
        DDTPRDD_RD.upd = true;
        IBS.READ(SCCGWA, DDRPRDD, DDTPRDD_RD);
        if (SCCGWA.COMM_AREA.DBIO_FLG == '0') {
            WS_PRDD_FLG = 'Y';
        } else {
            WS_PRDD_FLG = 'N';
        }
    }
    public void R000_REWRITE_DDTPRDD() throws IOException,SQLException,Exception {
        DDTPRDD_RD = new DBParm();
        DDTPRDD_RD.TableName = "DDTPRDD";
        IBS.REWRITE(SCCGWA, DDRPRDD, DDTPRDD_RD);
    }
    public void B_MPAG() throws IOException,SQLException,Exception {
    if (!SCCGWA.COMM_AREA.BSP_FLG.equalsIgnoreCase("BSP") && !SCCGWA.COMM_AREA.CHNL.equalsIgnoreCase("BAT")) { //FROM #IFDEF ONL
        JIBS_tmp_str[9] = "SCZMPAG";
        Class<?>clazz = Class.forName(JIBS_tmp_str[9].trim());
        Object obj = clazz.newInstance();
        Method m = clazz.getDeclaredMethod("MP",new Class[]{SCCGWA.getClass(), SCCMPAG.getClass()});
        m.invoke(obj, SCCGWA, SCCMPAG);
        if (SCCGWA.COMM_AREA.EXCP_FLG == 'Y') {
            Z_RET();
            if (pgmRtn) return;
        }
    } else { //FROM #ELSE
    } //FROM #ENDIF
    }
    public void Z_RET() throws IOException,SQLException,Exception {
        pgmRtn = true;
        return;
    }
    public void B_DB_EXCP() throws IOException,SQLException,Exception {
        throw new SQLException(SCCGWA.e);
    }
}
