package com.hisun.FX;

import com.hisun.BP.*;
import com.hisun.SC.*;
import com.hisun.TC.XStreamUtil;
import com.hisun.VT.WFCCAPV;
import com.hisun.WF.*;
import com.hisun.DD.*;

import java.io.IOException;
import java.sql.SQLException;

public class FXOT1159 {
    DBParm FXTDIRFX_RD;
    String CPN_P_INQ_ORG = "BP-P-INQ-ORG      ";
    String CPN_INQ_EXR_CODE = "BP-INQ-EXR-CODE   ";
    String K_EXRPLMT = "EXRPLMT ";
    String K_PROD_CD1 = "EX000001";
    String K_PROD_CD2 = "EX000002";
    String K_PROD_CD3 = "EX000003";
    String K_PROD_CD4 = "EX000004";
    String K_CNY = "CNY";
    char K_PAY_MTH_PWD = '2';
    char K_PAY_MTH_PWD_OR_SIGN = '5';
    char K_PAY_MTH_PWD_AND_SIGN = '6';
    char K_CASH_FLG_CNY = '1';
    char K_CASH_FLG_REMIT = '2';
    char K_CI_TYP_PERSONAL = 'P';
    char K_CI_TYP_COMPANY = 'C';
    char K_CI_TYPE_FINANCIAL = 'F';
    char K_AC_STS = 'C';
    char K_USE_IND = 'Y';
    char WS_CHECK_RATE_FLG = ' ';
    double WS_TOTAL_AMT = 0;
    FXCMSG_ERROR_MSG FXCMSG_ERROR_MSG = new FXCMSG_ERROR_MSG();
    BPCMSG_ERROR_MSG BPCMSG_ERROR_MSG = new BPCMSG_ERROR_MSG();
    SCCEXCP SCCEXCP = new SCCEXCP();
    SCCCALL SCCCALL = new SCCCALL();
    SCCMSG SCCMSG = new SCCMSG();
    SCCFMT SCCFMT = new SCCFMT();
    FXCSDRFX FXCSDRFX = new FXCSDRFX();
    BPCPQORG BPCPQORG = new BPCPQORG();
    BPCOIEC BPCOIEC = new BPCOIEC();
    WFCCAPV WFCCAPV = new WFCCAPV();
    BPCPQPRD BPCPQPRD = new BPCPQPRD();
    BPCPCMWD BPCPCMWD = new BPCPCMWD();
    BPCQCCY BPCQCCY = new BPCQCCY();
    DDRMST DDRMST = new DDRMST();
    DDCMSG_ERROR_MSG DDCMSG_ERROR_MSG = new DDCMSG_ERROR_MSG();
    FXCRDRFX FXCRDRFX = new FXCRDRFX();
    FXRDIRFX FXRDIRFX = new FXRDIRFX();
    FXCF151 FXCF151 = new FXCF151();
    SCCGWA SCCGWA;
    SCCGAPV SCCGAPV;
    FXB1159_AWA_1159 FXB1159_AWA_1159;
    SCCGSCA_SC_AREA GWA_SC_AREA;
    SCCGBPA_BP_AREA GWA_BP_AREA;
    BPRTLT BPRTLT;
    BPCPQBNK_DATA_INFO BPCRBANK;
    public void MP(SCCGWA SCCGWA) throws IOException,SQLException,Exception {
        this.SCCGWA = SCCGWA;
        CEP.TRC(SCCGWA);
        A000_INIT_PROC();
        B000_MAIN_PROC();
        CEP.TRC(SCCGWA, "FXOT1159 return!");
        Z_RET();
    }
    public void A000_INIT_PROC() throws IOException,SQLException,Exception {
        SCCGWA.COMM_AREA.AWA_AREA_PTR = SCCGWA.COMM_AREA.AWA_AREA_PTR.replaceAll("BODY>", "FXB1159_AWA_1159>");
        FXB1159_AWA_1159 = (FXB1159_AWA_1159) XStreamUtil.xmlToBean(SCCGWA.COMM_AREA.AWA_AREA_PTR);
        GWA_BP_AREA = (SCCGBPA_BP_AREA) SCCGWA.BP_AREA_PTR;
        GWA_SC_AREA = (SCCGSCA_SC_AREA) SCCGWA.SC_AREA_PTR;
        SCCGAPV = (SCCGAPV) GWA_SC_AREA.APVL_AREA_PTR;
        BPRTLT = (BPRTLT) SCCGWA.COMM_AREA.TLT_AREA_PTR;
        BPCRBANK = (BPCPQBNK_DATA_INFO) SCCGWA.COMM_AREA.BANK_AREA_PTR;
        CEP.TRC(SCCGWA, BPCRBANK.LOC_CCY1);
        CEP.TRC(SCCGWA, GWA_BP_AREA.CANCEL_AREA.CAN_AC_DATE);
        CEP.TRC(SCCGWA, GWA_BP_AREA.CANCEL_AREA.CAN_JRN_NO);
    }
    public void B000_MAIN_PROC() throws IOException,SQLException,Exception {
        B010_REV_INPUT_CHECK();
        B030_REV_REC_PROC();
        B030_SEND_OUTPUT();
    }
    public void B010_REV_INPUT_CHECK() throws IOException,SQLException,Exception {
        IBS.init(SCCGWA, FXRDIRFX);
        IBS.init(SCCGWA, FXCRDRFX);
        FXCRDRFX.FUNC = 'I';
        FXRDIRFX.KEY.TRN_DT = GWA_BP_AREA.CANCEL_AREA.CAN_AC_DATE;
        FXRDIRFX.KEY.JRN_NO = GWA_BP_AREA.CANCEL_AREA.CAN_JRN_NO;
        FXTDIRFX_RD = new DBParm();
        FXTDIRFX_RD.TableName = "FXTDIRFX";
        FXTDIRFX_RD.where = "TRN_DT = :FXRDIRFX.KEY.TRN_DT "
            + "AND JRN_NO = :FXRDIRFX.KEY.JRN_NO";
        IBS.READ(SCCGWA, FXRDIRFX, this, FXTDIRFX_RD);
        if (SCCGWA.COMM_AREA.DBIO_FLG == '1') {
            CEP.ERR(SCCGWA, FXCMSG_ERROR_MSG.FX_REC_NOTFND);
        }
        CEP.TRC(SCCGWA, "JJJ001");
        CEP.TRC(SCCGWA, FXRDIRFX.STATUS);
        if (FXRDIRFX.STATUS == 'R') {
            CEP.ERR(SCCGWA, FXCMSG_ERROR_MSG.FX_CONT_NO_RIGHT);
        }
        if (SCCGWA.COMM_AREA.BR_DP.TR_BRANCH != FXRDIRFX.KEY.UPD_BR) {
            CEP.ERR(SCCGWA, FXCMSG_ERROR_MSG.FX_BR_ERROR);
        }
    }
    public void S000_CALL_FXZRDRFX() throws IOException,SQLException,Exception {
        IBS.CALLCPN(SCCGWA, "FX-R-MAIN-DRFX", FXCRDRFX);
        if (FXCRDRFX.RETURN_INFO == 'N') {
            CEP.ERR(SCCGWA, FXCRDRFX.RC);
        }
    }
    public void B030_REV_REC_PROC() throws IOException,SQLException,Exception {
        IBS.init(SCCGWA, FXCSDRFX);
        FXCSDRFX.FUNC = 'R';
        CEP.TRC(SCCGWA, GWA_BP_AREA.CANCEL_AREA.CAN_AC_DATE);
        CEP.TRC(SCCGWA, GWA_BP_AREA.CANCEL_AREA.CAN_JRN_NO);
        FXCSDRFX.TRN_DT = GWA_BP_AREA.CANCEL_AREA.CAN_AC_DATE;
        FXCSDRFX.JRN_NO = GWA_BP_AREA.CANCEL_AREA.CAN_JRN_NO;
        FXCSDRFX.CTA_NO = FXRDIRFX.CTA_NO;
        FXCSDRFX.STATUS = FXRDIRFX.STATUS;
        FXCSDRFX.VALUE_DT = FXRDIRFX.VALUE_DT;
        FXCSDRFX.O_END_DT = FXRDIRFX.O_END_DT;
        FXCSDRFX.HLD_NO = FXRDIRFX.HLD_NO;
        FXCSDRFX.PAC_FLG = FXRDIRFX.PAC_FLG;
        FXCSDRFX.DD_AC1 = FXRDIRFX.DD_AC1;
        FXCSDRFX.BUY_CCY = FXRDIRFX.BUY_CCY;
        FXCSDRFX.BUY_AMT = FXRDIRFX.BUY_AMT;
        FXCSDRFX.B_CS_FLG = FXRDIRFX.B_CS_FLG;
        FXCSDRFX.B_SUPAC = FXRDIRFX.BUY_SUPAC;
        FXCSDRFX.CAC_FLG = FXRDIRFX.CAC_FLG;
        FXCSDRFX.DD_AC2 = FXRDIRFX.DD_AC2;
        FXCSDRFX.SELL_CCY = FXRDIRFX.SELL_CCY;
        FXCSDRFX.SELL_AMT = FXRDIRFX.SELL_AMT;
        FXCSDRFX.S_CS_FLG = FXRDIRFX.S_CS_FLG;
        FXCSDRFX.S_SUPAC = FXRDIRFX.SELL_SUPAC;
        FXCSDRFX.REV_NO = FXRDIRFX.REV_NO;
        FXCSDRFX.RATE_TM = FXRDIRFX.RATE_TM;
        FXCSDRFX.AC_BR = FXRDIRFX.AC_BR;
        S000_CALL_FXZSDRFX();
    }
    public void B030_SEND_OUTPUT() throws IOException,SQLException,Exception {
        IBS.init(SCCGWA, FXCF151);
        FXCF151.UPD_BR = FXCSDRFX.UPD_BR;
        FXCF151.TRN_DT = FXCSDRFX.TRN_DT;
        FXCF151.SEQ = FXCSDRFX.SEQ;
        FXCF151.JRN_NO = FXCSDRFX.JRN_NO;
        FXCF151.CTA_NO = FXCSDRFX.CTA_NO;
        FXCF151.STATUS = FXCSDRFX.STATUS;
        FXCF151.TIK_NO = FXCSDRFX.TIK_NO;
        FXCF151.PROD_CD = FXCSDRFX.PROD_CD;
        FXCF151.PROD_NM = FXCSDRFX.PROD_NM;
        FXCF151.CI_NO = FXCSDRFX.CI_NO;
        FXCF151.CI_TYP = FXCSDRFX.CI_TYP;
        FXCF151.CI_CNM = FXCSDRFX.CI_CNM;
        FXCF151.CI_ENM = FXCSDRFX.CI_ENM;
        FXCF151.TRA_AC = FXCSDRFX.TRA_AC;
        FXCF151.VALUE_DT = FXCSDRFX.VALUE_DT;
        FXCF151.O_END_DT = FXCSDRFX.O_END_DT;
        FXCF151.PAC_FLG = FXCSDRFX.PAC_FLG;
        FXCF151.DD_AC1 = FXCSDRFX.DD_AC1;
        FXCF151.AC_TYP1 = FXCSDRFX.AC_TYP1;
        FXCF151.DRAW_MTH = FXCSDRFX.DRAW_MTH;
        FXCF151.PAY_PSW = FXCSDRFX.PAY_PSW;
        FXCF151.B_CS_FLG = FXCSDRFX.B_CS_FLG;
        FXCF151.BUY_CCY = FXCSDRFX.BUY_CCY;
        FXCF151.BUY_AMT = FXCSDRFX.BUY_AMT;
        FXCF151.B_SUPAC = FXCSDRFX.B_SUPAC;
        FXCF151.CAC_FLG = FXCSDRFX.CAC_FLG;
        FXCF151.DD_AC2 = FXCSDRFX.DD_AC2;
        FXCF151.AC_TYP2 = FXCSDRFX.AC_TYP2;
        FXCF151.REV_NO = FXCSDRFX.REV_NO;
        FXCF151.S_CS_FLG = FXCSDRFX.S_CS_FLG;
        FXCF151.SELL_CCY = FXCSDRFX.SELL_CCY;
        FXCF151.SELL_AMT = FXCSDRFX.SELL_AMT;
        FXCF151.S_SUPAC = FXCSDRFX.S_SUPAC;
        FXCF151.EX_CODE = FXCSDRFX.EX_CODE;
        FXCF151.EX_TIME = FXCSDRFX.EX_TIME;
        FXCF151.EXR_TYPE = FXCSDRFX.EXR_TYPE;
        FXCF151.RATE_TM = FXCSDRFX.RATE_TM;
        FXCF151.SYS_RATE = FXCSDRFX.SYS_RATE;
        FXCF151.PRE_RATE = FXCSDRFX.PRE_RATE;
        FXCF151.SPREAD = FXCSDRFX.SPREAD;
        FXCF151.AUTH_LVL = FXCSDRFX.AUTH_LVL;
        FXCF151.EX_RATE = FXCSDRFX.EX_RATE;
        FXCF151.REF_NO = FXCSDRFX.REF_NO;
        FXCF151.EXST_CD1 = FXCSDRFX.EXST_CD1;
        FXCF151.AMT_NS1 = FXCSDRFX.AMT_NS1;
        FXCF151.EXST_CD2 = FXCSDRFX.EXST_CD2;
        FXCF151.AMT_NS2 = FXCSDRFX.AMT_NS2;
        FXCF151.EXST_CD3 = FXCSDRFX.EXST_CD3;
        FXCF151.AMT_NS3 = FXCSDRFX.AMT_NS3;
        FXCF151.ST_CHNL = FXCSDRFX.ST_CHNL;
        FXCF151.AC_BR = FXCSDRFX.AC_BR;
        FXCF151.BS_TYPE = FXCSDRFX.BS_TYPE;
        FXCF151.STL_CODE = FXCSDRFX.STL_CODE;
        FXCF151.REG_CD = FXCSDRFX.REG_CD;
        FXCF151.TX_CD = FXCSDRFX.TX_CD;
        FXCF151.CAP_CD = FXCSDRFX.CAP_CD;
        FXCF151.USE_TYPE = FXCSDRFX.USE_TYPE;
        FXCF151.USE_DTL = FXCSDRFX.USE_DTL;
        FXCF151.REG_NAME = FXCSDRFX.REG_NAME;
        FXCF151.BKDT_FLG = FXCSDRFX.BKDT_FLG;
        FXCF151.CRT_TLR = FXCSDRFX.CRT_TLR;
        FXCF151.RMK = FXCSDRFX.RMK;
        CEP.TRC(SCCGWA, FXCF151.SEQ);
        CEP.TRC(SCCGWA, FXCF151.JRN_NO);
        CEP.TRC(SCCGWA, FXCF151.STATUS);
        IBS.init(SCCGWA, SCCFMT);
        SCCFMT.FMTID = "FX159";
        SCCFMT.DATA_PTR = FXCF151;
        SCCFMT.DATA_LEN = 3458;
        IBS.FMT(SCCGWA, SCCFMT);
    }
    public void S000_CALL_FXZSDRFX() throws IOException,SQLException,Exception {
        IBS.CALLCPN(SCCGWA, "FX-S-MAIN-DRFX", FXCSDRFX);
    }
    public void Z_RET() throws IOException,SQLException,Exception {
        return;
    }
    public void B_DB_EXCP() throws IOException,SQLException,Exception {
        throw new SQLException(SCCGWA.e);
    }
}
